<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
<overview>
<p>
    If user input is written to a log without prior encoding of that data into a limited
    safe set of characters, a malicious user providing specially-crafted input may be able 
    to inject fake or malicious log entries.
</p>
<p>
    A log injection vulnerability occurs when an application writes user-supplied data to a log without 
    proper security controls. By injecting specific characters or sequences of characters,
    an attacker can inject malicious log entries that may confuse log readers, undermine forensics, and 
    potentially bypass logging-related security mechanisms.
</p>
</overview>

<recommendation>
<p>
    User input should be sanitized before being written to a log entry in a way that is 
    reversible and that prevents downstream injection vulnerabilities. Preventing log injection 
    vulnerabilities as described above requires encoding input data into a safe subset of 
    printable US-ASCII characters. A good choice of encoding is URL-encoding, as it encodes
    various classes of potentially problematic characters.
</p>
<p>
    As URL-encoding excludes sets of special characters, encoding user-input with it prevents log injection
    that new-line and ANSI control sequence sanitization alone will not. URL-encoding also preserves
    the original data in a reversible format, which is useful for forensics and debugging.
</p>
<p>
    Alternatively, an application should use a logging framework configured to sanitize user input and encode 
    log entries into a structured format, such as but not limited to JSON or XML. Logging frameworks, such
    as log4j and logback, support specification of custom encoding implementations via their configuration files.
</p>
</recommendation>

<example>
  <p>In the first example, a username, provided by the user, is logged using <code>logger.warn</code> (from  <code>org.slf4j.Logger</code>). 
    In the first case (<code>/bad</code> endpoint), the username is logged without any sanitization.
    If a malicious user provides <code>Guest'%0AUser:'Admin</code> as a username parameter, 
    the log entry will be split into two separate lines, where the first line will be <code>User:'Guest'</code> and the second one will be <code>User:'Admin'</code>.
</p>
<sample src="LogInjectionBad.java" />

<p> In the second example (<code>/baddataloss</code> endpoint), <code>replaceAll()</code> is used to remove any non-alphanumeric characters from the user-input.
  If a malicious user provides `Guest'%0AUser:'Admin` as a username parameter, traces of the malicious injection attempt will be silently ignored and 
  the log message will be logged as `GuestUserAdmin` due to aggressive removal of non alpha-numeric characters. </p>
<sample src="LogInjectionBadDataLoss.java" />

<p> In the third example (<code>/good</code> endpoint), <code>URLEncode.encode()</code> is used to encode the user-input.
  If a malicious user provides `Guest'%0AUser:'Admin` as a username parameter, the log message will be logged as `Guest%27%0AUser%3A%27Admin`,
  thus safely logging the message while preserving the original data in a reversible encoded format.</p>
<sample src="LogInjectionGood.java" />
</example>

<references>
<li>OWASP: <a href="https://owasp.org/www-community/attacks/Log_Injection">Log Injection</a>.</li>
<li>Klebanov, Vladimir: <a href="https://www.linkedin.com/pulse/log-injection-vulnerabilities-how-fix-vladimir-klebanov">Log Injection Vulnerabilities: How (Not) to Fix</a>.</li>
</references>
</qhelp>
